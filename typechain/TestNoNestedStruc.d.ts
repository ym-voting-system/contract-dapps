/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestNoNestedStrucInterface extends ethers.utils.Interface {
  functions: {
    "isSigned(uint256,address)": FunctionFragment;
    "items721(uint256,address,uint256)": FunctionFragment;
    "pockets(uint256)": FunctionFragment;
    "proposePocket(address,bytes,uint256,address[],uint256[])": FunctionFragment;
    "sharePerUser(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isSigned",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "items721",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pockets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposePocket",
    values: [string, BytesLike, BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sharePerUser",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "isSigned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items721", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pockets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposePocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharePerUser",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestNoNestedStruc extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestNoNestedStrucInterface;

  functions: {
    isSigned(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    items721(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pockets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber] & {
        to: string;
        data: string;
        pStatus: number;
        totalAmount: BigNumber;
      }
    >;

    proposePocket(
      _to: string,
      _data: BytesLike,
      _totalAmount: BigNumberish,
      _users: string[],
      _sharePerUser: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sharePerUser(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  isSigned(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  items721(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pockets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, BigNumber] & {
      to: string;
      data: string;
      pStatus: number;
      totalAmount: BigNumber;
    }
  >;

  proposePocket(
    _to: string,
    _data: BytesLike,
    _totalAmount: BigNumberish,
    _users: string[],
    _sharePerUser: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sharePerUser(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    isSigned(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    items721(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pockets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber] & {
        to: string;
        data: string;
        pStatus: number;
        totalAmount: BigNumber;
      }
    >;

    proposePocket(
      _to: string,
      _data: BytesLike,
      _totalAmount: BigNumberish,
      _users: string[],
      _sharePerUser: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    sharePerUser(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    isSigned(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    items721(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pockets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    proposePocket(
      _to: string,
      _data: BytesLike,
      _totalAmount: BigNumberish,
      _users: string[],
      _sharePerUser: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sharePerUser(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isSigned(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    items721(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pockets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposePocket(
      _to: string,
      _data: BytesLike,
      _totalAmount: BigNumberish,
      _users: string[],
      _sharePerUser: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sharePerUser(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
