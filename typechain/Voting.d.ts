/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VotingInterface extends ethers.utils.Interface {
  functions: {
    "addAddressWhitelist(address)": FunctionFragment;
    "defaultWorkflowStatus()": FunctionFragment;
    "getWinner()": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startsRecordingProposals()": FunctionFragment;
    "startsVotingSession()": FunctionFragment;
    "stopRecordingProposals()": FunctionFragment;
    "stopVotingSession()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userAddProposal(string)": FunctionFragment;
    "voteForFavoriteProposal(uint256)": FunctionFragment;
    "voteTallying()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAddressWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultWorkflowStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startsRecordingProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startsVotingSession",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopRecordingProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopVotingSession",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userAddProposal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForFavoriteProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteTallying",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addAddressWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultWorkflowStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startsRecordingProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startsVotingSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopRecordingProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopVotingSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAddProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForFavoriteProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteTallying",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposalRegistered(uint256)": EventFragment;
    "Voted(address,uint256)": EventFragment;
    "VoterRegistered(address)": EventFragment;
    "WorkflowStatusChange(uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkflowStatusChange"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ProposalRegisteredEvent = TypedEvent<
  [BigNumber] & { proposalId: BigNumber }
>;

export type VotedEvent = TypedEvent<
  [string, BigNumber] & { voter: string; proposalId: BigNumber }
>;

export type VoterRegisteredEvent = TypedEvent<
  [string] & { voterAddress: string }
>;

export type WorkflowStatusChangeEvent = TypedEvent<
  [number, number] & { previousStatus: number; newStatus: number }
>;

export class Voting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VotingInterface;

  functions: {
    addAddressWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultWorkflowStatus(overrides?: CallOverrides): Promise<[number]>;

    getWinner(overrides?: CallOverrides): Promise<[string]>;

    isWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, boolean, BigNumber] & {
          isRegistered: boolean;
          hasVoted: boolean;
          votedProposalId: BigNumber;
        }
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { description: string; voteCount: BigNumber }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startsRecordingProposals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startsVotingSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopRecordingProposals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopVotingSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userAddProposal(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteForFavoriteProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteTallying(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAddressWhitelist(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultWorkflowStatus(overrides?: CallOverrides): Promise<number>;

  getWinner(overrides?: CallOverrides): Promise<string>;

  isWhitelisted(
    _address: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      isRegistered: boolean;
      hasVoted: boolean;
      votedProposalId: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { description: string; voteCount: BigNumber }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startsRecordingProposals(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startsVotingSession(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopRecordingProposals(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopVotingSession(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userAddProposal(
    description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteForFavoriteProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteTallying(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAddressWhitelist(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultWorkflowStatus(overrides?: CallOverrides): Promise<number>;

    getWinner(overrides?: CallOverrides): Promise<string>;

    isWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        isRegistered: boolean;
        hasVoted: boolean;
        votedProposalId: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { description: string; voteCount: BigNumber }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    startsRecordingProposals(overrides?: CallOverrides): Promise<void>;

    startsVotingSession(overrides?: CallOverrides): Promise<void>;

    stopRecordingProposals(overrides?: CallOverrides): Promise<void>;

    stopVotingSession(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userAddProposal(
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    voteForFavoriteProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voteTallying(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ProposalRegistered(uint256)"(
      proposalId?: null
    ): TypedEventFilter<[BigNumber], { proposalId: BigNumber }>;

    ProposalRegistered(
      proposalId?: null
    ): TypedEventFilter<[BigNumber], { proposalId: BigNumber }>;

    "Voted(address,uint256)"(
      voter?: null,
      proposalId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { voter: string; proposalId: BigNumber }
    >;

    Voted(
      voter?: null,
      proposalId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { voter: string; proposalId: BigNumber }
    >;

    "VoterRegistered(address)"(
      voterAddress?: null
    ): TypedEventFilter<[string], { voterAddress: string }>;

    VoterRegistered(
      voterAddress?: null
    ): TypedEventFilter<[string], { voterAddress: string }>;

    "WorkflowStatusChange(uint8,uint8)"(
      previousStatus?: null,
      newStatus?: null
    ): TypedEventFilter<
      [number, number],
      { previousStatus: number; newStatus: number }
    >;

    WorkflowStatusChange(
      previousStatus?: null,
      newStatus?: null
    ): TypedEventFilter<
      [number, number],
      { previousStatus: number; newStatus: number }
    >;
  };

  estimateGas: {
    addAddressWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultWorkflowStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getWinner(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startsRecordingProposals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startsVotingSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopRecordingProposals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopVotingSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userAddProposal(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteForFavoriteProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteTallying(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAddressWhitelist(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultWorkflowStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startsRecordingProposals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startsVotingSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopRecordingProposals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopVotingSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userAddProposal(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteForFavoriteProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteTallying(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
